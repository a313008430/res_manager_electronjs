!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("fs")):"function"==typeof define&&define.amd?define(["fs"],e):(t=t||self,t.game=e(t.fs))}(this,function(t){"use strict";class e{constructor(){this.groupId=0,this.rootResList=new Map,this.groupList=new Map,this.allType=new Set,this.groupNameList=new Map}addGroup(t){return this.groupId++,this.groupList.set(this.groupId,new Map),this.groupNameList.set(this.groupId,t),this.groupId}clearGroup(t){let e=this.groupList.get(t);e&&e.size&&(this.groupList.delete(t),this.groupNameList.delete(t))}replaceGroupName(t,e){return this.groupNameList.get(t)?(this.groupNameList.set(t,e),e):null}getGroupName(t){let e="";return this.groupNameList.forEach(i=>{t===i&&(e=i)}),e}}class i{constructor(){this.initGroup="init",this.dataManager=new e,this.browseBtn=document.querySelector("#browse"),this.groupListNode=$("#groupListNode"),this.addGroupBtn=$("#addGroupBtn"),this.myListNode=$("#myListNode"),this.rootList=$("#rootList"),this.browseBtn.addEventListener("change",e=>{let i=this.browseBtn.files.item(0);if("application/json"===i.type){let e=i.path,o=e.split("\\");o.splice(o.length-2,2);let s=o.join("/")+"/assets/resources";if(this.setRootPath(s),t.existsSync(s)){this.clear(),this.dataManager.root=s,this.readDir(s),this.drawRootList();let e=t.readFileSync(i.path).toString();e.length?e=JSON.parse(e):(console.log("json文件为空"),this.addGroup(this.initGroup,!1))}else alert("root path is error!");console.log(s)}else alert("The format must be JSON!");console.log(i)}),this.addGroupBtn.on("click",()=>{this.addGroup("GroupName"+this.dataManager.groupList.size,!0);this.groupListNode.find("input").focus()}),this.groupListNode.on("click","dd",t=>{if(t.currentTarget){$(t.currentTarget).addClass("cur").siblings().removeClass("cur");let e=Number(t.currentTarget.getAttribute("data-id"));this.curGroupId!==e&&(this.drawByGroupIdList(e),this.curGroupId=e)}});let i;this.groupListNode.on("dblclick",".replaceGroupName",t=>{if(t.currentTarget){let e=$(t.currentTarget).find("input");e.prop("disabled",""),e.focus(),i=e.val()}}),this.groupListNode.on("focusout blur","input",t=>{$(t.currentTarget).attr("disabled","disabled");let e=$(t.currentTarget).val();e.match(/^[A-z]/)&&!e.match(/[^A-z0-9\_]/)?console.log("1231232可以开始"):($(t.currentTarget).val(i),this.hint("内容必须以字母开头，除了_不可以有其它特殊字符!"));console.log($(t.currentTarget).val())}),this.rootList.on("dblclick","dd",t=>{t.currentTarget&&this.addDataList(t.currentTarget.getAttribute("data-id"))})}addDataList(t){let e=this.dataManager.rootResList.get(t);if(e){let i=this.dataManager.groupList.get(this.curGroupId);i&&!i.get(t)&&(i.set(t,{resName:e.name,type:e.type,path:e.path}),this.drawItem(i.get(t)))}}drawItem(t){let e="";this.dataManager.allType.forEach(i=>{e+=`<option ${t.type===i?"selected":""}>${i}</option>`}),this.myListNode.prepend(`<dd data-id=${t.path}>\r\n        <div class="g0 resName">${t.resName}</div>\r\n        <div class="g0 resType select is-small">\r\n            <select>${e}</select>\r\n        </div>\r\n        <div class="g1">${t.path}</div>\r\n        <div class="g0 annotation">\r\n            <input class="input is-small" type="text" value="${t.note?t.note:""}" placeholder="注释">\r\n        </div>\r\n    </dd>`)}addGroup(t,e){if(this.dataManager.getGroupName(t))return void alert("分组名称已经存在");this.curGroupId=this.dataManager.addGroup(t),this.groupListNode.find("dd").removeClass("cur"),this.groupListNode.append(`<dd data-id=${this.curGroupId} class="tag g1 is-white cur ${e?"replaceGroupName":""}">\r\n        <input  disabled class="input is-small groupName" type="text" placeholder="Group name" value="${t}">\r\n        ${e?' <button class="delete is-small"></button>':""}\r\n    </dd>`),this.drawByGroupIdList(this.curGroupId)}drawByGroupIdList(t){let e=this.dataManager.groupList.get(t);e&&(this.myListNode.html(""),e.forEach(t=>{this.drawItem(t)}),console.log(e))}clear(){this.dataManager.rootResList.clear(),this.groupListNode.html(""),this.myListNode.html("")}setRootPath(t){document.querySelector("#rootNode").innerText=t}drawRootList(){console.log(this.dataManager.rootResList);let t="";this.dataManager.rootResList.forEach((e,i)=>{t+=`<dd data-id=${i} data-type=${e.type}>\r\n                <div class="g0 resName">${e.name}</div>\r\n                <div class="g0 resType">${e.type}</div>\r\n                <div class="g1">${this.dataManager.root+e.path} <a class="delete is-small"></a></div>\r\n                <div class="g0 size_me">${this.convertFileSize(e.size)}</div>\r\n            </dd>`}),this.rootList.html(t)}readDir(e){if(e.length){let i=t.readdirSync(e);for(let o=i.length-1;o>-1;o--)if(-1===i[o].indexOf(".meta")){let s=t.statSync(e+"/"+i[o]);if(s.isDirectory())this.readDir(e+"/"+i[o]);else if(s.isFile()){let t=i[o].replace("_","").split(".");this.dataManager.allType.add(t[1]);let r=(e+"/"+i[o]).replace(this.dataManager.root+"","");this.dataManager.rootResList.set(r,{name:t.join("_"),path:r,type:t[1],size:s.size})}}}}convertFileSize(t){return t/=1e3,t<1024?t.toFixed(2)+"KB":(t/=1e3).toFixed(2)+"MB"}hint(t){let e=$("#hintView");e.show(),e.text(t),this.hintTime&&clearTimeout(this.hintTime),this.hintTime=setTimeout(()=>{e.fadeOut(300)},2e3)}}class o{constructor(){new i}}return o});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
